{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/store.js","Components/Container/Container.styled.jsx","Components/Container/Container.jsx","Components/Form/Form.styled.jsx","Components/Form/Form.jsx","redux/phonebook/phonebook-selectors.js","Components/ContactList/ContactList.styled.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["addContact","createAction","newContact","payload","id","shortid","generate","deleteContact","filterContacts","itemsReducer","createReducer","actions","state","map","contact","name","indexOf","alert","filter","filterReducer","_","combineReducers","items","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","CustomContainer","Container","children","CustomForm","Form","useState","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","onSubmit","preventDefault","phonebookActions","htmlFor","type","pattern","title","required","onChange","getFilter","getVisibleContacts","getItems","normalizedFilter","toLowerCase","includes","CustomContactList","ListContactEl","ContactList","useSelector","onClick","FilterContainer","customId","Filter","event","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.aefdbe49.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nexport const addContact = createAction('contacts/ADD_CONTACT', newContact => ({\r\n  payload: { id: shortid.generate(), ...newContact },\r\n}));\r\nexport const deleteContact = createAction('contacts/DELETE_CONTACT');\r\nexport const filterContacts = createAction('contacts/FILTER_CONTACT');\r\n\r\n// ------------------without Redux Toolkit-----------------------\r\n//\r\n// import * as actionTypes from 'redux/phonebook/phonebook-types';\r\n// import shortid from 'shortid';\r\n\r\n// export const addContact = newContact => ({\r\n//   type: actionTypes.ADD_CONTACT,\r\n//   payload: { id: shortid.generate(), ...newContact },\r\n// });\r\n\r\n// export const deleteContact = id => ({\r\n//   type: actionTypes.DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// export const filterContacts = text => ({\r\n//   type: actionTypes.FILTER_CONTACT,\r\n//   payload: text,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from 'redux/phonebook/phonebook-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const contactNames = state.map(contact => contact.name);\r\n    const isRepeat = contactNames.indexOf(payload.name) !== -1;\r\n\r\n    if (isRepeat) {\r\n      alert(`${payload.name} is already in Contacts`);\r\n      return state;\r\n    }\r\n    return [payload, ...state];\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) => {\r\n    return state.filter(contact => contact.id !== payload);\r\n  },\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n// ------------------without Redux Toolkit-----------------------\r\n//\r\n// import { combineReducers } from 'redux';\r\n// import * as actionTypes from 'redux/phonebook/phonebook-types';\r\n// // import initialContacts from 'Data/contacts.json';\r\n\r\n// const itemsReducer = (\r\n//   state = JSON.parse(window.localStorage.getItem('contacts')) ?? [],\r\n//   { type, payload },\r\n// ) => {\r\n//   switch (type) {\r\n//     case actionTypes.ADD_CONTACT: {\r\n//       const contactNames = state.map(contact => contact.name);\r\n//       const isRepeat = contactNames.indexOf(payload.name) !== -1;\r\n\r\n//       if (isRepeat) {\r\n//         alert(`${payload.name} is already in Contacts`);\r\n//         return state;\r\n//       }\r\n\r\n//       window.localStorage.setItem(\r\n//         'contacts',\r\n//         JSON.stringify([payload, ...state]),\r\n//       );\r\n//       return [payload, ...state];\r\n//     }\r\n//     case actionTypes.DELETE_CONTACT: {\r\n//       const newState = state.filter(contact => contact.id !== payload);\r\n//       window.localStorage.setItem('contacts', JSON.stringify([...newState]));\r\n//       return newState;\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.FILTER_CONTACT: {\r\n//       return payload;\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from 'redux/phonebook/phonebook-reducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n\r\n// ------------------without Redux Toolkit-----------------------\r\n//\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n//\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n//\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomContainer = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nexport default CustomContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CustomContainer from 'Components/Container/Container.styled';\r\n\r\nfunction Container({ children }) {\r\n  return <CustomContainer>{children}</CustomContainer>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomForm = styled.form`\r\n  border: 2px solid black;\r\n  border-radius: 3px;\r\n  padding: 10px;\r\n  width: 300px;\r\n\r\n  & button {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  & label,\r\n  input {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport default CustomForm;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as phonebookActions from 'redux/phonebook/phonebook-actions';\r\n// import PropTypes from 'prop-types';\r\nimport CustomForm from './Form.styled';\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newContact = { name: name, number: number };\r\n    dispatch(phonebookActions.addContact(newContact));\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <CustomForm onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        id=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"number\">Phone</label>\r\n\r\n      <input\r\n        type=\"text\"\r\n        name=\"number\"\r\n        id=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\">Add Contact</button>\r\n    </CustomForm>\r\n  );\r\n}\r\n\r\n// ------------without Hooks -----------------\r\n// Form.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: data => dispatch(phonebookActions.addContact(data)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(Form);\r\n","export const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const items = getItems(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomContactList = styled.ul`\r\n  padding: 10px;\r\n  width: 300px;\r\n  list-style-type: square;\r\n`;\r\n\r\nexport default CustomContactList;\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as phonebookActions from 'redux/phonebook/phonebook-actions';\r\nimport { getVisibleContacts } from 'redux/phonebook/phonebook-selectors';\r\nimport styled from '@emotion/styled/macro';\r\nimport CustomContactList from './ContactList.styled';\r\n\r\nconst ListContactEl = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <CustomContactList>\r\n      {contacts.map(contact => (\r\n        <ListContactEl key={contact.id}>\r\n          <span>\r\n            {contact.name}: {contact.number}\r\n          </span>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => dispatch(phonebookActions.deleteContact(contact.id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </ListContactEl>\r\n      ))}\r\n    </CustomContactList>\r\n  );\r\n}\r\n\r\n// ----------------without Hooks -----------------\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     }),\r\n//   ),\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { items, filter } = state.contacts;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   const visibleContacts = items.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(phonebookActions.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst FilterContainer = styled.div`\r\n  border: 1px dashed black;\r\n  padding: 10px;\r\n  width: 300px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport default FilterContainer;\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as phonebookActions from 'redux/phonebook/phonebook-actions';\r\nimport { getFilter } from 'redux/phonebook/phonebook-selectors';\r\nimport FilterContainer from './Filter.styled';\r\n\r\nconst customId = shortid.generate();\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = event =>\r\n    dispatch(phonebookActions.filterContacts(event.target.value));\r\n\r\n  return (\r\n    <FilterContainer>\r\n      <label>\r\n        Find contact by name\r\n        <input\r\n          id={customId}\r\n          value={value}\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n        ></input>\r\n      </label>\r\n    </FilterContainer>\r\n  );\r\n}\r\n\r\n// -----------without Hooks----------------\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n//\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n//\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event =>\r\n//     dispatch(phonebookActions.filterContacts(event.target.value)),\r\n// });\r\n//\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { useState, useEffect } from 'react';\nimport './App.css';\nimport Container from 'Components/Container';\nimport Form from 'Components/Form';\nimport ContactList from 'Components/ContactList';\nimport Filter from 'Components/Filter';\n\n// const useLocalStorage = (key, initialValue) => {\n//   const [state, setState] = useState(() => {\n//     return JSON.parse(window.localStorage.getItem(key)) ?? initialValue;\n//   });\n\n//   useEffect(() => {\n//     window.localStorage.setItem(key, JSON.stringify(state));\n//   }, [key, state]);\n\n//   return [state, setState];\n// };\n\nfunction App() {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from 'redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}